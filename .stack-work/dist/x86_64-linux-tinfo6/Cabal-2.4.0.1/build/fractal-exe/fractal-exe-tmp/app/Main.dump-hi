
==================== FINAL INTERFACE ====================
2019-06-11 03:28:31.401155545 UTC

interface main:Main 8065
  interface hash: 2cb52b3eaf80110b4ea446f94e8aee2f
  ABI hash: 15187e4ec59d6dedaed40004dbb76f75
  export-list hash: dddd33f5f091a337bf17985967c580cc
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 54dc54aa17aa4295f70bdae6c0460c54
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0* binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      fractal-0.1.0.0 ghc-prim-0.5.3 integer-gmp-1.0.2.0 mtl-2.2.2
                      parsec-3.1.13.0 text-1.2.3.1 transformers-0.5.6.2
orphans: text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:System.Environment c54e0d0308e729fdace6bc37aa74bb52
import  -/  base-4.12.0.0:System.Exit 3c945ec7c596067c067092c41083c3d0
import  -/  base-4.12.0.0:System.IO dd4f3cfe73b94b7cae46a4ca98a3f09f
import  -/  fractal-0.1.0.0:Parser 6f0d558eeccc59e3c7fb6d6e07d05026
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
a59bc6943e7d5f76c6b0f9a4d214dcd8
  $wshowl :: [Parser.Expr] -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [2] -}
1ac119b7db4af533b07637b15bd01384
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
cb5a0d3caa9e0a81dd7dfe0b0320c5fc
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openFile1
                        (GHC.List.head @ GHC.Base.String ipv1)
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (GHC.IO.Handle.Text.hPutStr'
                    GHC.IO.Handle.FD.stdout
                    (case (Text.Parsec.Combinator.$wmany1
                             @ GHC.Base.String
                             @ Data.Functor.Identity.Identity
                             @ GHC.Types.Char
                             @ ()
                             @ Parser.Expr
                             Parser.expr1
                               `cast`
                             (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                       <[GHC.Types.Char]>_R
                                       <()>_R
                                       <Data.Functor.Identity.Identity>_R
                                       <Parser.Expr>_R))
                             @ (Text.Parsec.Prim.Consumed
                                  (Data.Functor.Identity.Identity
                                     (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program)))
                             (Text.Parsec.Prim.State
                                @ GHC.Base.String
                                @ ()
                                ipv5
                                Parser.result6
                                GHC.Tuple.())
                             Parser.result5
                               `cast`
                             (<Parser.Program>_R
                              ->_R <Text.Parsec.Prim.State GHC.Base.String ()>_R
                              ->_R <Text.Parsec.Error.ParseError>_R
                              ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                            <Text.Parsec.Prim.Consumed
                                               (Data.Functor.Identity.Identity
                                                  (Text.Parsec.Prim.Reply
                                                     GHC.Base.String () Parser.Program))>_R))
                             Parser.result4
                               `cast`
                             (<Text.Parsec.Error.ParseError>_R
                              ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                            <Text.Parsec.Prim.Consumed
                                               (Data.Functor.Identity.Identity
                                                  (Text.Parsec.Prim.Reply
                                                     GHC.Base.String () Parser.Program))>_R))
                             Parser.result3
                             Parser.result2
                               `cast`
                             (<Text.Parsec.Error.ParseError>_R
                              ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                            <Text.Parsec.Prim.Consumed
                                               (Data.Functor.Identity.Identity
                                                  (Text.Parsec.Prim.Reply
                                                     GHC.Base.String () Parser.Program))>_R)))
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <Text.Parsec.Prim.Consumed
                                  (Data.Functor.Identity.Identity
                                     (Text.Parsec.Prim.Reply
                                        GHC.Base.String () Parser.Program))>_R) of wild {
                       Text.Parsec.Prim.Consumed r
                       -> case r `cast`
                               (Data.Functor.Identity.N:Identity[0]
                                    <Text.Parsec.Prim.Reply
                                       GHC.Base.String () Parser.Program>_R) of wild1 {
                            Text.Parsec.Prim.Ok x ds4 ds5 -> Main.main3 x
                            Text.Parsec.Prim.Error err -> Main.main2 err }
                       Text.Parsec.Prim.Empty r
                       -> case r `cast`
                               (Data.Functor.Identity.N:Identity[0]
                                    <Text.Parsec.Prim.Reply
                                       GHC.Base.String () Parser.Program>_R) of wild1 {
                            Text.Parsec.Prim.Ok x ds4 ds5 -> Main.main3 x
                            Text.Parsec.Prim.Error err -> Main.main2 err } })
                    GHC.Types.True)
                   `cast`
                 (GHC.Types.N:IO[0] <()>_R)
                   ipv4 } } }) -}
07deaf43b9eb57401dbdd3575b52d1a5
  main2 :: Text.Parsec.Error.ParseError -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U(1*U,U,U),1*U)>,
     Unfolding: (\ (b1 :: Text.Parsec.Error.ParseError)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Data.Either.$fShowEither4
                   (case b1 of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                    case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                    Text.Parsec.Error.$w$cshow ww4 ww5 ww6 ww2 } })) -}
9ca9f1c8e694ebd1761f43d5f49f410e
  main3 :: [Parser.Expr] -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (b1 :: [Parser.Expr])[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Data.Either.$fShowEither2
                   (case b1 of wild {
                      []
                      -> GHC.CString.unpackAppendCString#
                           GHC.Show.showList__4
                           (GHC.Types.[] @ GHC.Types.Char)
                      : x xs
                      -> GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.showList__3
                           (GHC.Base.++
                              @ GHC.Types.Char
                              (Parser.$fShowExpr_$cshow x)
                              (case Main.$wshowl xs of ww { (#,#) ww1 ww2 ->
                               GHC.Types.: @ GHC.Types.Char ww1 ww2 })) })) -}
a04cb482c9ec5d83cd662905e0f36208
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

