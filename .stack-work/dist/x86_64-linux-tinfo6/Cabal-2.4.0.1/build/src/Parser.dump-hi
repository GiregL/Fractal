
==================== FINAL INTERFACE ====================
2019-06-11 03:27:28.924860579 UTC

interface fractal-0.1.0.0-J4W8YNA7AZNGPRJU2ohoDb:Parser 8065
  interface hash: da04f16e00eacf4744ce80473dfd6848
  ABI hash: 6f0d558eeccc59e3c7fb6d6e07d05026
  export-list hash: 52dbecdb28e8372727424d0b593edd11
  orphan hash: 7d31b27060c64e68e40680096f00a7f5
  flag hash: b6427d8aeb77a442ff3ccc1f154c876f
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.boolean
  Parser.charP
  Parser.condExpr
  Parser.defineExpr
  Parser.double
  Parser.expr
  Parser.functionCall
  Parser.ifExpr
  Parser.integer
  Parser.num
  Parser.program
  Parser.quote
  Parser.result
  Parser.stringP
  Parser.symbolP
  Parser.value
  Parser.valueListToExprList
  Parser.whiteSpace
  Parser.Expr{Parser.Action Parser.Cond Parser.Constant Parser.DefineExpr Parser.FunctionCall Parser.IfExpr Parser.Quote}
  Parser.Program
  Parser.Value{Parser.BoolValue Parser.CharValue Parser.DoubleValue Parser.IntegerValue Parser.StringValue Parser.SymbolValue}
module dependencies:
package dependencies: array-0.5.3.0 base-4.12.0.0* binary-0.8.6.0
                      bytestring-0.10.8.2 containers-0.6.0.1 deepseq-1.4.4.0
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0*
                      text-1.2.3.1 transformers-0.5.6.2
orphans: text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Complex base-4.12.0.0:Data.Functor.Compose
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
import  -/  base-4.12.0.0:Control.Monad 07eaec7fd256019b318d048d00f45b1c
import  -/  base-4.12.0.0:Data.Char 74f67fe9150a102afa18766e840f6832
import  -/  base-4.12.0.0:Data.Either 423bee738f25e5ee983d072216009be8
import  -/  base-4.12.0.0:Data.Foldable efb37371da929e7bc88d896298d2d979
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:Data.Functor.Identity f8b68112573f77a401c3389544bc0f0d
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  base-4.12.0.0:Text.Read 87f80fc2538a174aea915dd98f74fc0a
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
import  -/  parsec-3.1.13.0:Text.Parsec a449bab8a559924837d01133e4285b52
import  -/  parsec-3.1.13.0:Text.Parsec.Char 354008922c0ae3cd09c0d5f03ceed1a6
import  -/  parsec-3.1.13.0:Text.Parsec.Combinator d7df4d78b2dde17d6f7c360e89c02dd2
import  -/  parsec-3.1.13.0:Text.Parsec.Error 4a8413da9687799422dbd13c40cb4295
import  -/  parsec-3.1.13.0:Text.Parsec.Expr 1ee01f6d00077dd63087459cde95c9d9
import  -/  parsec-3.1.13.0:Text.Parsec.Language a1163c5b148d8b965fd3a12af96b098d
import  -/  parsec-3.1.13.0:Text.Parsec.Prim b7e3745aaa88154209ad5d3864ccb4e1
import  -/  parsec-3.1.13.0:Text.Parsec.String a407b37ae197a313b6c2743ddc1df71f
import  -/  parsec-3.1.13.0:Text.Parsec.Token 11b33d080e98d0c0e0d21dfc74ccc196
8371cf7492bf008b3a49f3316c1d5e4a
  $fShowExpr :: GHC.Show.Show Parser.Expr
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Expr
                  Parser.$fShowExpr_$cshowsPrec
                  Parser.$fShowExpr_$cshow
                  Parser.$fShowExpr_$cshowList -}
8371cf7492bf008b3a49f3316c1d5e4a
  $fShowExpr1 :: Parser.Expr -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Parser.Expr) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Parser.$fShowExpr_$cshow x))
                   s) -}
c75367b75fc082c55403528270ad7e72
  $fShowExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FunctionCall "#) -}
a0d1e956b0e1b2fcc874a8ad87d99501
  $fShowExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quote"#) -}
3ed394f700759dcaeffa7b2fc94bcd2e
  $fShowExpr4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Parser.$fShowExpr5) -}
256ecb8341cde4d7eac86918649796cf
  $fShowExpr5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
450f42d35b6be803fba035380d53e782
  $fShowExpr6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Parser.$fShowExpr7) -}
a2bada2edcc008898bf05c5da2e5b45c
  $fShowExpr7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Soon"#) -}
8371cf7492bf008b3a49f3316c1d5e4a
  $fShowExpr_$cshow :: Parser.Expr -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds2 :: Parser.Expr) ->
                 case ds2 of wild {
                   DEFAULT -> Parser.$fShowExpr6
                   Parser.Constant v
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        (Parser.$w$cshowsPrec 0# v (GHC.Types.[] @ GHC.Types.Char))
                        Parser.$fShowExpr4
                   Parser.Quote list
                   -> GHC.CString.unpackAppendCString#
                        Parser.$fShowExpr3
                        (Parser.$fShowExpr_go1 list)
                   Parser.FunctionCall v list
                   -> GHC.CString.unpackAppendCString#
                        Parser.$fShowExpr2
                        (GHC.Base.++
                           @ GHC.Types.Char
                           (Parser.$w$cshowsPrec 0# v (GHC.Types.[] @ GHC.Types.Char))
                           (Parser.$fShowExpr_go list)) }) -}
8371cf7492bf008b3a49f3316c1d5e4a
  $fShowExpr_$cshowList :: [Parser.Expr] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Parser.Expr]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Parser.Expr Parser.$fShowExpr1 ls s) -}
8371cf7492bf008b3a49f3316c1d5e4a
  $fShowExpr_$cshowsPrec ::
    GHC.Types.Int -> Parser.Expr -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds2 :: GHC.Types.Int)
                   (x :: Parser.Expr)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Parser.$fShowExpr_$cshow x))
                   s) -}
8371cf7492bf008b3a49f3316c1d5e4a
  $fShowExpr_go :: [Parser.Expr] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
8371cf7492bf008b3a49f3316c1d5e4a
  $fShowExpr_go1 :: [Parser.Expr] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
969950d171f0acca8f4a3b683fec9f7b
  $fShowValue :: GHC.Show.Show Parser.Value
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Value
                  Parser.$fShowValue_$cshowsPrec
                  Parser.$fShowValue_$cshow
                  Parser.$fShowValue_$cshowList -}
969950d171f0acca8f4a3b683fec9f7b
  $fShowValue1 :: Parser.Value -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Parser.Value) -> Parser.$w$cshowsPrec 0# w) -}
501d5ff610052c8ce1986912adc58ce9
  $fShowValue2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
969950d171f0acca8f4a3b683fec9f7b
  $fShowValue_$cshow :: Parser.Value -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Parser.Value) ->
                 Parser.$fShowValue_$cshowsPrec
                   Parser.$fShowValue2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
969950d171f0acca8f4a3b683fec9f7b
  $fShowValue_$cshowList :: [Parser.Value] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Parser.Value]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Parser.Value Parser.$fShowValue1 ls s) -}
969950d171f0acca8f4a3b683fec9f7b
  $fShowValue_$cshowsPrec ::
    GHC.Types.Int -> Parser.Value -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Parser.Value) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Parser.$w$cshowsPrec ww1 w1 }) -}
d0de7f971a4f60e13bea9d54e4ccee73
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
66c71a42559cb6bdf96d656e4cc4b6eb
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Maybe.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds2 :: [tok]) ->
                 case ds2 of wild {
                   []
                   -> (GHC.Maybe.Nothing @ (tok, [tok]))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Maybe.Maybe (tok, [tok])>_R))
                   : t ts
                   -> (GHC.Maybe.Just @ (tok, [tok]) (t, ts))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Maybe.Maybe (tok, [tok])>_R)) }) -}
23428a842af2ddb94b5302a4206cb9b1
  $tc'Action :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7148079920074542680##
                   17243373193449056485##
                   Parser.$trModule
                   Parser.$tc'Action2
                   0#
                   Parser.$tc'Action1) -}
6136769329afe1285dc883024c374a68
  $tc'Action1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b4f5f2e2d0ed1b02615f974e29e49544
  $tc'Action2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'Action3) -}
aa6576aba9533d281e278495761f25f7
  $tc'Action3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Action"#) -}
3f1bb481ae1f33bbe12cba4a5c3ad97b
  $tc'BoolValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13814270293689309963##
                   1824641412927505869##
                   Parser.$trModule
                   Parser.$tc'BoolValue2
                   0#
                   Parser.$tc'BoolValue1) -}
1c1b8140b0cf0c0393b55f56ab49818c
  $tc'BoolValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
387a9a905b7d5815e49e31db554d58bf
  $tc'BoolValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'BoolValue3) -}
08a9152311b6c84e2c4d16043d514ad1
  $tc'BoolValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BoolValue"#) -}
caf799fc75421675f0b49eddb5464e6f
  $tc'CharValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12615881066870425713##
                   11396236971536475721##
                   Parser.$trModule
                   Parser.$tc'CharValue2
                   0#
                   Parser.$tc'CharValue1) -}
f5c4e591a5b09043f9879993ee33968a
  $tc'CharValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
65e6b4196d6a0bf32955ab34a3a3c3ec
  $tc'CharValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'CharValue3) -}
d3c61bbfc425daac174d65360390b033
  $tc'CharValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CharValue"#) -}
549d8d1c6e2dbafd8e30828e9385271f
  $tc'Cond :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9966895968333715230##
                   4852220301501912473##
                   Parser.$trModule
                   Parser.$tc'Cond2
                   0#
                   Parser.$tc'Cond1) -}
a7ccbb0cfb04a93ea3e79759c1ea8039
  $tc'Cond1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ef30f0dc1c76a8538bf36586a505a680
  $tc'Cond2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'Cond3) -}
683185df7fe9beb4d6cce5c7e6b955eb
  $tc'Cond3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cond"#) -}
b61ae1085d5dd897f18859e64f872590
  $tc'Constant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6165037107626012882##
                   10745237233320581793##
                   Parser.$trModule
                   Parser.$tc'Constant2
                   0#
                   Parser.$tc'Constant1) -}
36d1bdd3829fd8160d710645a0409a49
  $tc'Constant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ecd5a9913ef0ddca69d40beb602676e1
  $tc'Constant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'Constant3) -}
41a05ebc573592d5be02121b001387ce
  $tc'Constant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Constant"#) -}
37d4165f97ff9967e3259c4e6042250a
  $tc'DefineExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16336198402618369516##
                   9830840623473393425##
                   Parser.$trModule
                   Parser.$tc'DefineExpr2
                   0#
                   Parser.$tc'DefineExpr1) -}
8252ae10b82e5c8d023ae2b58ff12e8a
  $tc'DefineExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5cc6b0f227560fffff1a43d4fac93e1c
  $tc'DefineExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'DefineExpr3) -}
f450326ceae5032ec218a57f85d87ef3
  $tc'DefineExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DefineExpr"#) -}
03cf4c4bd3d0fce9234b16d372ebb14f
  $tc'DoubleValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11653620698738793060##
                   1186327560164771358##
                   Parser.$trModule
                   Parser.$tc'DoubleValue2
                   0#
                   Parser.$tc'DoubleValue1) -}
1dd8d1f3c31e3f991eca676db1185904
  $tc'DoubleValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a3c7ca518a75660b028aeb0e502f9416
  $tc'DoubleValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'DoubleValue3) -}
7fad327ad41e55b87d60e42a65393eb9
  $tc'DoubleValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DoubleValue"#) -}
21158d3a7942bf8f61768eb8530107f0
  $tc'FunctionCall :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6658293051005713213##
                   15958644343519848748##
                   Parser.$trModule
                   Parser.$tc'FunctionCall2
                   0#
                   Parser.$tc'FunctionCall1) -}
eec188c9f3919a43b7a3638c95e08c1b
  $tc'FunctionCall1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1dd83ef20293b8bb97c28a572ac0a809
  $tc'FunctionCall2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'FunctionCall3) -}
0bbba703ff462cac63984ae284c9f4cc
  $tc'FunctionCall3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FunctionCall"#) -}
fc3cadaa28cef797fe8499f2744d9b55
  $tc'IfExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9819861406814039087##
                   15253270650245817436##
                   Parser.$trModule
                   Parser.$tc'IfExpr2
                   0#
                   Parser.$tc'IfExpr1) -}
df525aadbae6ce82aecf0c721952dfa3
  $tc'IfExpr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c76f503cbc0f450995c887c065877ea
  $tc'IfExpr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'IfExpr3) -}
1618cb9a4d656d3e4562056e501cb659
  $tc'IfExpr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfExpr"#) -}
a3930b977db48bfae20f33105b97a22b
  $tc'IntegerValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8150987854897049552##
                   14070841878479571628##
                   Parser.$trModule
                   Parser.$tc'IntegerValue2
                   0#
                   Parser.$tc'IntegerValue1) -}
ec70ca0c67be831029016dc6dd9d828a
  $tc'IntegerValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
690c698199dd84fd269e96939195d951
  $tc'IntegerValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'IntegerValue3) -}
941c38abacd8b481abec0743c7c63892
  $tc'IntegerValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IntegerValue"#) -}
2a782ebda2f98fbff6543a975f2234c6
  $tc'Quote :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7218890998263859213##
                   9649906623476669505##
                   Parser.$trModule
                   Parser.$tc'Quote1
                   0#
                   Parser.$tc'Cond1) -}
e6a79e05f53b3d113e2f252fe4977671
  $tc'Quote1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'Quote2) -}
8540ecf6d7180bb81fdba5c3bd3adfc5
  $tc'Quote2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quote"#) -}
9b234bdb7d95defe8046ca322d226d0f
  $tc'StringValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10549226912395190611##
                   12279288563570427601##
                   Parser.$trModule
                   Parser.$tc'StringValue2
                   0#
                   Parser.$tc'StringValue1) -}
bfb6fe9de0eb405b570afea33fc947c0
  $tc'StringValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1167661aaff68e3ee61a1ce762a734d2
  $tc'StringValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'StringValue3) -}
b8f9d66cd578376a2fbe685a52a74142
  $tc'StringValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringValue"#) -}
65fea66d2c1ccc8ec07ffdb41864ae90
  $tc'SymbolValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9156480348735739709##
                   17466964321978910498##
                   Parser.$trModule
                   Parser.$tc'SymbolValue1
                   0#
                   Parser.$tc'StringValue1) -}
e4ccdd7d578d75d40b677d765dde5155
  $tc'SymbolValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'SymbolValue2) -}
35111023526557a0cefd47f2bf38ff29
  $tc'SymbolValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SymbolValue"#) -}
5b2c30d43a44df7e32ea76ab0f0126f2
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11477698878871634088##
                   3323725764538841658##
                   Parser.$trModule
                   Parser.$tcExpr1
                   0#
                   GHC.Types.krep$*) -}
18de2697265cadae84bd8bae35be5161
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tcExpr2) -}
d3329ff318f4fa7bea681c293dac8a39
  $tcExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expr"#) -}
df1802dec1edee6c44bc102c203308f5
  $tcValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4333228539987907328##
                   1643762065887191646##
                   Parser.$trModule
                   Parser.$tcValue1
                   0#
                   GHC.Types.krep$*) -}
105bdca7af80483ce11ce05d92e56dc2
  $tcValue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tcValue2) -}
b0bfc4ccce833864386e15854d744ffe
  $tcValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Value"#) -}
c5f64c09688462f58a4de0661667b37f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parser.$trModule3
                   Parser.$trModule1) -}
3d53f11cbace2d7338183320f2db8b44
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$trModule2) -}
158b2ab5dea1f9123a3a1fc30fb034a3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Parser"#) -}
e70f0ecd06d0c60a24c563d05a355c3e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$trModule4) -}
9a417a0d363a2f087d238c1b355ca376
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("fractal-0.1.0.0-J4W8YNA7AZNGPRJU2ohoDb"#) -}
969950d171f0acca8f4a3b683fec9f7b
  $w$cshowsPrec :: GHC.Prim.Int# -> Parser.Value -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2] -}
2a12a640083b7abad26de181b4e0c748
  $wcharP ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,U>,
     Inline: [2],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Value
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Parser.charP_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   w
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    case s2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Parser.$wk
                      @ b1
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      w1
                      w2
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w2 (Text.Parsec.Error.mergeError err err')) } })
                   w2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    case s2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Parser.$wk
                      @ b1
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      w1
                      w2
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w3 (Text.Parsec.Error.mergeError err err')) } })
                   w3) -}
1d3c1a6a1d6333091107232a4ad0b63c
  $wdefineExpr ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,U>,
     Inline: [2],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Parser.condExpr_m2
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   w
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.$wlvl
                      @ b1
                      s2
                      w1
                      w2
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w2 (Text.Parsec.Error.mergeError err err')))
                   w2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.$wlvl
                      @ b1
                      s2
                      w1
                      w2
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w3 (Text.Parsec.Error.mergeError err err')))
                   w3) -}
57b69a76e6414b365d4717cdf5711a0e
  $wfunctionCall ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,U>,
     Inline: [2],
     Unfolding: (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Parser.condExpr_m2
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   w
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    case s2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Parser.$wk3
                      @ b1
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      w1
                      w2
                      (\ (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w2 (Text.Parsec.Error.mergeError err err')) } })
                   w2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    case s2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                    Parser.$wk3
                      @ b1
                      ww1
                      ww5
                      ww6
                      ww7
                      ww3
                      w1
                      w2
                      (\ (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w3 (Text.Parsec.Error.mergeError err err')) } })
                   w3) -}
6978f005b7862088ec337586aa52412c
  $wk ::
    [GHC.Types.Char]
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 8,
     Strictness: <L,U><L,U><S,U><S,U><L,U><L,C(C1(C1(U)))><L,U><L,C(U)>,
     Inline: [2] -}
00db0bd438b6af0f27c3587926c8fd54
  $wk1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ Parser.Expr
                   Parser.condExpr5
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.Expr>_R))
                   @ b
                   w
                   (\ (x :: [Parser.Expr])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.condExpr3
                      x
                      @ b
                      s2
                      w1
                      w2
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w2 (Text.Parsec.Error.mergeError err err')))
                   w2
                   (\ (x :: [Parser.Expr])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.condExpr3
                      x
                      @ b
                      s2
                      w1
                      w2
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w4 (Text.Parsec.Error.mergeError err err')))
                   w4) -}
5c3b235725174d8b472ff4b2e0c2cead
  $wk2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [2] -}
a28ca419ac7b0d9634812f2b8a79e2b4
  $wk3 ::
    [GHC.Types.Char]
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 8,
     Strictness: <S,U><L,U><S,U><S,U><L,U><L,C(C1(C1(U)))><L,U><L,1*C1(U)>,
     Inline: [2] -}
ad9b2764cb13f073f0cdd0ffdff66d99
  $wk4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ Parser.Expr
                   Parser.expr1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.Expr>_R))
                   @ b
                   w
                   (\ (x :: [Parser.Expr])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.quote2
                      x
                      @ b
                      s2
                      w1
                      w2
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w2 (Text.Parsec.Error.mergeError err err')))
                   w2
                   (\ (x :: [Parser.Expr])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.quote2
                      x
                      @ b
                      s2
                      w1
                      w2
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w4 (Text.Parsec.Error.mergeError err err')))
                   w4) -}
bfc0cdbbe5f790fd105722408fa1fe64
  $wk5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ b
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Value
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Parser.Value
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   Parser.stringP4
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   w
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.stringP2
                      x
                      @ b
                      s2
                      w1
                      w2
                      (\ (x1 :: Parser.Value)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w1 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w2 (Text.Parsec.Error.mergeError err err')))
                   w2
                   (\ (x :: [GHC.Types.Char])
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.stringP2
                      x
                      @ b
                      s2
                      w1
                      w2
                      (\ (x1 :: Parser.Value)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       w3 x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       w4 (Text.Parsec.Error.mergeError err err')))
                   w4) -}
8fc8a45dfe924757f8245bec90679c9e
  $wlvl ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 4,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(U)>,
     Inline: [2] -}
9e5bd969814556b86bbc34a4a4593f2a
  $wsymbolP ::
    [GHC.Types.Char]
    -> Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 8,
     Strictness: <S,U><L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U><L,1*C1(U)>,
     Inline: [2] -}
8371cf7492bf008b3a49f3316c1d5e4a
  data Expr
    = Constant Parser.Value
    | Quote [Parser.Expr]
    | FunctionCall Parser.Value [Parser.Expr]
    | IfExpr Parser.Expr [Parser.Expr] [Parser.Expr]
    | DefineExpr Parser.Value [Parser.Expr] [Parser.Expr]
    | Action Parser.Expr [Parser.Expr]
    | Cond [Parser.Expr]
c0af41cf4093422636ca875096df4966
  type Program = [Parser.Expr]
969950d171f0acca8f4a3b683fec9f7b
  data Value
    = IntegerValue GHC.Integer.Type.Integer
    | DoubleValue GHC.Types.Double
    | CharValue GHC.Types.Char
    | StringValue GHC.Base.String
    | BoolValue GHC.Types.Bool
    | SymbolValue GHC.Base.String
231049c88ca49c454f03e0fc4ae7c187
  boolean :: Text.Parsec.String.Parser Parser.Value
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.boolean1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Value>_R)) -}
196f57149fc28748e423dc79ca1e1286
  boolean1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U> -}
f70ea5960776458d24e4d04946fb002b
  charP :: Text.Parsec.String.Parser Parser.Value
  {- Arity: 5, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.charP1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Value>_R)) -}
fa3a497372c673e8f6707abe666e69c0
  charP1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,A><L,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Value
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Parser.Value
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Parser.$wcharP @ b1 w w1 w2 w4) -}
ae25285edb8325cbe54c76c3017d2abf
  charP2 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\''#) -}
a0a9078de6f3c5d992f50bf4356bfd77
  charP_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.charP2) -}
cf66d89d7962d55169930631bcd26313
  condExpr :: Text.Parsec.String.Parser Parser.Expr
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.condExpr1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Expr>_R)) -}
8d8c739eb6af08e8a9c0ce9ba0153832
  condExpr1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Parser.condExpr_m2
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.condExpr2
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.condExpr2
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
5faf0f0a611dfed0f6150019fd8d9581
  condExpr10 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   Data.Functor.Identity.$fMonadIdentity_$c>>=
                   (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
                      @ GHC.Types.Char)
                   Parser.condExpr11
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w1
                   w4 } }) -}
a8b119e4559f4e4f1bef1cbd852d138d
  condExpr11 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (c :: GHC.Types.Char) ->
                 GHC.List.elem
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   c
                   Parser.condExpr_cs) -}
f4310b78fd8ccb64185a64f02c6d8a7a
  condExpr12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" \t\r\n"#) -}
e520a84d7a1ea4c43d2b630cc309fcd1
  condExpr13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Parser.condExpr14) -}
e818b8d868dc3b549aba05d2e2be5af9
  condExpr14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cond"#) -}
f95ecd81e26937a4859b8e1bfc30c61d
  condExpr2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.condExpr13
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.$wk1
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Base.String)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.$wk1
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
1843ba67af618d7e33e957a424a78118
  condExpr3 ::
    [Parser.Expr]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Parser.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Parser.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (content :: [Parser.Expr])
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Parser.Expr
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: Parser.Expr
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   lvl20 :: Parser.Expr = Parser.Cond content
                 } in
                 Parser.condExpr_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b
                   eta
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta1
                      lvl20
                      s2
                      (case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta3
                      lvl20
                      s2
                      (case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
8e35217e765420a6a8e55d6b07927869
  condExpr4 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ')'#) -}
c87d5b39cc7e4d00fab39bab33657186
  condExpr5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ Parser.Expr
                   Parser.condExpr9
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Parser.condExpr6
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.Expr>_R))) -}
8262630538d123374d6ce50b923f032f
  condExpr6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Parser.condExpr_m2
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.condExpr7
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.condExpr7
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
2babfc0883463b36aa67ca33317dbc84
  condExpr7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Parser.condExpr_m2
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.$wk2
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.$wk2
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
78666ff3617ecd4efbcbd3e21058914d
  condExpr8 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '('#) -}
26c236bb426a57f9875551e7b325ef41
  condExpr9 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   (w1 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w2 :: ()
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: ()
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.$wskipMany
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Parser.condExpr10
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   w1
                   w2
                   w3
                   w4) -}
87ba55ca33438990b6a92356d53b64e0
  condExpr_cs :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Parser.condExpr12) -}
6327c8834f5d9dc2b04c6cf8f292bb8d
  condExpr_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.condExpr4) -}
cf3b050a696029909daf8632dc4b1025
  condExpr_m2 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.condExpr8) -}
59a0fa6a128b6fb151decc40cafab73d
  defineExpr :: Text.Parsec.String.Parser Parser.Expr
  {- Arity: 5, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.defineExpr1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Expr>_R)) -}
0afe329a593c9b3eedb0df214533ac07
  defineExpr1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,A><L,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Parser.$wdefineExpr @ b1 w w1 w2 w4) -}
f99ed0e934103de1f1708bf74d014203
  double :: Text.Parsec.String.Parser Parser.Value
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.double1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Value>_R)) -}
438b4939afd912f65f1c04192f70f268
  double1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Parser.Value
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
4aa009f3fd1d68d222e868637150a658
  expr :: Text.Parsec.String.Parser Parser.Expr
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Parser.expr1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Expr>_R)) -}
8148a681e3cc6559ae1581addf2d9748
  expr1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ Parser.Expr
                   Parser.condExpr9
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Parser.expr2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.Expr>_R))) -}
426631ab096c2d270027e7ab3370a394
  expr2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U,U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
e968d9f53f327269651626d808683320
  functionCall :: Text.Parsec.String.Parser Parser.Expr
  {- Arity: 5, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.functionCall1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Expr>_R)) -}
5c952586a40d7c52f46ea2e84bb7352e
  functionCall1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5, Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,A><L,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, True)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Parser.Expr
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 Parser.$wfunctionCall @ b1 w w1 w2 w4) -}
32b93538f2b0d1abc9561e92eab3fddd
  ifExpr :: Text.Parsec.String.Parser Parser.Expr
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.ifExpr1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Expr>_R)) -}
30ca20b8487601e943243116b1e8c35a
  ifExpr1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Parser.condExpr_m2
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.ifExpr2
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.ifExpr2
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
4b3f849b7125394cb5893e27ea1996ad
  ifExpr2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
8982ff93ef51e8fceba0a322c81e0708
  integer :: Text.Parsec.String.Parser Parser.Value
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.integer1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Value>_R)) -}
12fe58e195407b31a8fae3b9b1a84c36
  integer1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Parser.Value
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
4f12bb4b657037a4ec2a6b01c66dcec2
  num :: Text.Parsec.String.Parser GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.num1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[GHC.Types.Char]>_R)) -}
b92474c631903a85a04797ed3ca13472
  num1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([GHC.Types.Char]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w3 :: [GHC.Types.Char]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: [GHC.Types.Char]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ GHC.Types.Char
                   Parser.num2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b
                   w2
                   w3
                   w4
                   w5
                   w6) -}
3723801579b0b6bd6e88bb4555e982de
  num2 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (eta :: Text.Parsec.Prim.State GHC.Base.String ())
                   (eta1 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: GHC.Types.Char
                            -> Text.Parsec.Prim.State GHC.Base.String ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Parser.num3
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Text.Parsec.Char.digit2
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
c299ad88c183e76ce2ef3573b983dc9f
  num3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   Data.Functor.Identity.$fMonadIdentity_$c>>=
                   (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
                      @ GHC.Types.Char)
                   GHC.Unicode.isDigit
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w1
                   w4 } }) -}
783b56604f1801a1f5d2eb35f98dde64
  program :: Text.Parsec.String.Parser Parser.Program
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.program1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <[Parser.Expr]>_R)) -}
7ffcd51fc16c75bc2edd40135ccede51
  program1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([Parser.Expr]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([Parser.Expr]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w2 :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w3 :: [Parser.Expr]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w5 :: [Parser.Expr]
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w6 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Combinator.$wmany1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   @ ()
                   @ Parser.Expr
                   Parser.expr1
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.Expr>_R))
                   @ b
                   w2
                   w3
                   w4
                   w5
                   w6) -}
1c8618f90b82df68ee241f2db1ca6d02
  quote :: Text.Parsec.String.Parser Parser.Expr
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.quote1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Expr>_R)) -}
dd732570e908e13857ada57f018b829d
  quote1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Expr
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Parser.Expr
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Text.Parsec.Char.string1
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.quote3
                   @ b1
                   s1
                   (\ (x :: GHC.Base.String)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.$wk4
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Base.String)[OneShot]
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                      (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                    Parser.$wk4
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Expr)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
3b8bb6300cf521e34e67817a791ace09
  quote2 ::
    [Parser.Expr]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Parser.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Parser.Expr
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (content :: [Parser.Expr])
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Parser.Expr
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: Parser.Expr
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   lvl20 :: Parser.Expr = Parser.Quote content
                 } in
                 Parser.condExpr_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b
                   eta
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta1
                      lvl20
                      s2
                      (case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta3
                      lvl20
                      s2
                      (case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
c7129383f4c1081c1e600670781e2166
  quote3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Parser.quote4) -}
5ea9af0ca9588a262755a5af9a8f2a74
  quote4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'("#) -}
4ee1d8cb6870f3ebcc26b900a41b077a
  result ::
    GHC.Base.String
    -> Data.Either.Either Text.Parsec.Error.ParseError Parser.Program
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.result1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Data.Either.Either
                             Text.Parsec.Error.ParseError Parser.Program>_R) -}
5c350c298a3f27184956d86e1d0ebc77
  result1 ::
    GHC.Base.String
    -> Data.Functor.Identity.Identity
         (Data.Either.Either Text.Parsec.Error.ParseError Parser.Program)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (source :: GHC.Base.String) ->
                 case (Text.Parsec.Combinator.$wmany1
                         @ GHC.Base.String
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ Parser.Expr
                         Parser.expr1
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <Parser.Expr>_R))
                         @ (Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program)))
                         (Text.Parsec.Prim.State
                            @ GHC.Base.String
                            @ ()
                            source
                            Parser.result6
                            GHC.Tuple.())
                         Parser.result5
                           `cast`
                         (<Parser.Program>_R
                          ->_R <Text.Parsec.Prim.State GHC.Base.String ()>_R
                          ->_R <Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () Parser.Program))>_R))
                         Parser.result4
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () Parser.Program))>_R))
                         Parser.result3
                         Parser.result2
                           `cast`
                         (<Text.Parsec.Error.ParseError>_R
                          ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                        <Text.Parsec.Prim.Consumed
                                           (Data.Functor.Identity.Identity
                                              (Text.Parsec.Prim.Reply
                                                 GHC.Base.String () Parser.Program))>_R)))
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply
                                    GHC.Base.String () Parser.Program))>_R) of wild {
                   Text.Parsec.Prim.Consumed r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () Parser.Program>_R) of wild1 {
                        Text.Parsec.Prim.Ok x ds2 ds3
                        -> (Data.Either.Right
                              @ Text.Parsec.Error.ParseError
                              @ Parser.Program
                              x)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        Text.Parsec.Error.ParseError Parser.Program>_R))
                        Text.Parsec.Prim.Error err
                        -> (Data.Either.Left
                              @ Text.Parsec.Error.ParseError
                              @ Parser.Program
                              err)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        Text.Parsec.Error.ParseError Parser.Program>_R)) }
                   Text.Parsec.Prim.Empty r
                   -> case r `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Text.Parsec.Prim.Reply
                                   GHC.Base.String () Parser.Program>_R) of wild1 {
                        Text.Parsec.Prim.Ok x ds2 ds3
                        -> (Data.Either.Right
                              @ Text.Parsec.Error.ParseError
                              @ Parser.Program
                              x)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        Text.Parsec.Error.ParseError Parser.Program>_R))
                        Text.Parsec.Prim.Error err
                        -> (Data.Either.Left
                              @ Text.Parsec.Error.ParseError
                              @ Parser.Program
                              err)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        Text.Parsec.Error.ParseError Parser.Program>_R)) } }) -}
8f924768b5c7549813bbe83db1d06edd
  result2 ::
    Text.Parsec.Error.ParseError
    -> Text.Parsec.Prim.Consumed
         (Data.Functor.Identity.Identity
            (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program))
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: (\ (err :: Text.Parsec.Error.ParseError) ->
                 Text.Parsec.Prim.Empty
                   @ (Data.Functor.Identity.Identity
                        (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program))
                   (Text.Parsec.Prim.Error
                      @ GHC.Base.String
                      @ ()
                      @ Parser.Program
                      err)
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program>_R))) -}
3c636a7b38cf73cd452bc9a3061f5c84
  result3 ::
    Parser.Program
    -> Text.Parsec.Prim.State GHC.Base.String ()
    -> Text.Parsec.Error.ParseError
    -> Data.Functor.Identity.Identity
         (Text.Parsec.Prim.Consumed
            (Data.Functor.Identity.Identity
               (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program)))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><S(LSS),1*U(U,U,U)><L,U>m2,
     Unfolding: (\ (a1 :: Parser.Program)
                   (s' :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                 case s' of dt { Text.Parsec.Prim.State ipv ipv1 ipv2 ->
                 (Text.Parsec.Prim.Empty
                    @ (Data.Functor.Identity.Identity
                         (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program))
                    (Text.Parsec.Prim.Ok
                       @ GHC.Base.String
                       @ ()
                       @ Parser.Program
                       a1
                       dt
                       err)
                      `cast`
                    (Sym (Data.Functor.Identity.N:Identity[0]
                              <Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program>_R)))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <Text.Parsec.Prim.Consumed
                              (Data.Functor.Identity.Identity
                                 (Text.Parsec.Prim.Reply
                                    GHC.Base.String () Parser.Program))>_R)) }) -}
c636510cc6ea5530b6fa12ac750b9a7d
  result4 ::
    Text.Parsec.Error.ParseError
    -> Text.Parsec.Prim.Consumed
         (Data.Functor.Identity.Identity
            (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program))
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: (\ (err :: Text.Parsec.Error.ParseError) ->
                 Text.Parsec.Prim.Consumed
                   @ (Data.Functor.Identity.Identity
                        (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program))
                   (Text.Parsec.Prim.Error
                      @ GHC.Base.String
                      @ ()
                      @ Parser.Program
                      err)
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program>_R))) -}
9bb8e796b72686ec7f43f66a3b6c9282
  result5 ::
    Parser.Program
    -> Text.Parsec.Prim.State GHC.Base.String ()
    -> Text.Parsec.Error.ParseError
    -> Text.Parsec.Prim.Consumed
         (Data.Functor.Identity.Identity
            (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program))
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U,U)><L,U>m1,
     Unfolding: (\ (a1 :: Parser.Program)
                   (s' :: Text.Parsec.Prim.State GHC.Base.String ())[OneShot]
                   (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                 Text.Parsec.Prim.Consumed
                   @ (Data.Functor.Identity.Identity
                        (Text.Parsec.Prim.Reply GHC.Base.String () Parser.Program))
                   (case s' of dt { Text.Parsec.Prim.State ipv ipv1 ipv2 ->
                    (Text.Parsec.Prim.Ok
                       @ GHC.Base.String
                       @ ()
                       @ Parser.Program
                       a1
                       dt
                       err)
                      `cast`
                    (Sym (Data.Functor.Identity.N:Identity[0]
                              <Text.Parsec.Prim.Reply
                                 GHC.Base.String () Parser.Program>_R)) })) -}
9d538be8d3ae586a7667cbf1850575b2
  result6 :: Text.Parsec.Pos.SourcePos
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Text.Parsec.Pos.SourcePos
                   (GHC.Types.[] @ GHC.Types.Char)
                   1#
                   1#) -}
8f4d54fd482dd1a67b3584a117792150
  stringP :: Text.Parsec.String.Parser Parser.Value
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Parser.stringP1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Value>_R)) -}
2e2b7a7a4ef8e608727012418694f56d
  stringP1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (cok :: Parser.Value
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (cerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1)
                   (eok :: Parser.Value
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1)
                   (eerr :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1) ->
                 Parser.stringP_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b1
                   s1
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.$wk5
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Value)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       cok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       cerr (Text.Parsec.Error.mergeError err err')))
                   cerr
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    Parser.$wk5
                      @ b1
                      s2
                      cok
                      cerr
                      (\ (x1 :: Parser.Value)
                         (s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ())[OneShot]
                         (err' :: Text.Parsec.Error.ParseError)[OneShot] ->
                       eok x1 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ (err' :: Text.Parsec.Error.ParseError) ->
                       eerr (Text.Parsec.Error.mergeError err err')))
                   eerr) -}
6b7dbf78b45005815dd5f4cb6b0c8b5d
  stringP2 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> (Parser.Value
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Parser.Value
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ (content :: [GHC.Types.Char])
                   @ b
                   (eta :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (eta1 :: Parser.Value
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: Parser.Value
                            -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 let {
                   lvl20 :: Parser.Value = Parser.StringValue content
                 } in
                 Parser.stringP_m1
                   `cast`
                 (Text.Parsec.Prim.N:ParsecT[0]
                      <[GHC.Types.Char]>_R
                      <()>_R
                      <Data.Functor.Identity.Identity>_R
                      <GHC.Types.Char>_R)
                   @ b
                   eta
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta1
                      lvl20
                      s2
                      (case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta2
                   (\ (x :: GHC.Types.Char)
                      (s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                      (err :: Text.Parsec.Error.ParseError) ->
                    eta3
                      lvl20
                      s2
                      (case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                       case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                       case s2 of wild { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                       case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                       case Text.Parsec.Error.$wmergeError
                              ww4
                              ww5
                              ww6
                              ww2
                              ww11
                              ww12
                              ww13
                              (GHC.Types.[]
                                 @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                       Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                   eta4) -}
6d9e96bec5aa453e398c6253ff13af85
  stringP3 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '"'#) -}
aa88819e2d5ba99345dc5fe06789c05f
  stringP4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <S(LS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Parsec.Prim.State GHC.Base.String ())
                   (w1 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w3 :: GHC.Types.Char
                          -> Text.Parsec.Prim.State GHC.Base.String ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wsatisfy
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   Data.Functor.Identity.$fMonadIdentity_$c>>=
                   (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
                      @ GHC.Types.Char)
                   Parser.stringP5
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w1
                   w4 } }) -}
6c9fc15ceec725ed39f8a49799db1e3a
  stringP5 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: GHC.Types.Char) ->
                 case ds2 of wild { GHC.Types.C# x ->
                 case x of wild1 {
                   DEFAULT -> GHC.Types.True '"'# -> GHC.Types.False } }) -}
53d5b355aa0e21712d7c54fd7c20dbaf
  stringP_m1 ::
    Text.Parsec.Prim.ParsecT
      [GHC.Types.Char] () Data.Functor.Identity.Identity GHC.Types.Char
  {- Unfolding: (Text.Parsec.Char.char
                   @ GHC.Base.String
                   @ Data.Functor.Identity.Identity
                   @ ()
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   Parser.stringP3) -}
1603c1858e35670768e8014fbc25f566
  symbolP :: Text.Parsec.String.Parser Parser.Value
  {- Arity: 5,
     Strictness: <S(SS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,1*C1(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.symbolP1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Value>_R)) -}
f545bb71d9faba75ba5717a276f91d70
  symbolP1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <S(SS(LSS)S),1*U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,A><L,1*C1(U)>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Parsec.Prim.State [GHC.Types.Char] ())
                   (w1 :: Parser.Value
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w2 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w3 :: Parser.Value
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1)
                   (w4 :: Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1) ->
                 case w of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Parser.$wsymbolP @ b1 ww1 ww5 ww6 ww7 ww3 w1 w2 w4 } }) -}
af5b1411458fe85d5daca3b082f9a482
  value :: Text.Parsec.String.Parser Parser.Value
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Parser.value1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <[GHC.Types.Char]>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.Value>_R)) -}
2aef462cca4e72df922f05e8b25f31cf
  value1 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Unfolding: (Text.Parsec.Prim.$fApplicativeParsecT2
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ Parser.Value
                   Parser.condExpr9
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   Parser.value2
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <Parser.Value>_R))) -}
49a8dee69836bf4ca0ae92ae3b6df6e4
  value2 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Parser.Value
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U(U,U,U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
5f8833f28782f540682bf7c4a231c3d5
  valueListToExprList :: [Parser.Value] -> [Parser.Expr]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b972cf218bda554eb2487e00fc41046a
  whiteSpace :: Text.Parsec.String.Parser ()
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                Parser.condExpr9
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <()>_R)) -}
instance [safe] GHC.Show.Show [Parser.Expr] = Parser.$fShowExpr
instance [safe] GHC.Show.Show [Parser.Value] = Parser.$fShowValue
"SPEC/Parser $fStream[]mtok @ Identity _" [orphan] forall @ tok
                                                          (v :: GHC.Base.Monad
                                                                  Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  v
  = Parser.$s$fStream[]mtok @ tok
"SPEC/Parser $fStream[]mtok_$cuncons @ Identity _" [orphan] forall @ tok
                                                                   ($dMonad :: GHC.Base.Monad
                                                                                 Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

